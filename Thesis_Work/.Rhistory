hist(chain[,1])
hist(chain[,2])
hist(chain[,3])
par(mfrow=c(1,3))
hist(chain[,1])
hist(chain[,2])
hist(chain[,3])
hist(chain[,1])
hist(chain[,2])
hist(chain[,3])
hist(chain[,1], main = "Intercept Posterior")
hist(chain[,2], main = "Beta1 Posterior")
hist(chain[,3], main = "Sigma Posterior")
knitr::opts_chunk$set(echo = TRUE)
library(invgamma)
par(mfrow = c(2,3))
hist(chain[-(1:burnIn),1],nclass=30, , main="Posterior of a", xlab="True value = red line" )
abline(v = mean(chain[-(1:burnIn),1]))
abline(v = trueA, col="red" )
par(mfrow = c(2,3))
hist(chain[-(1:burnIn),1],nclass=30, , main="Posterior of a", xlab="True value = red line" )
abline(v = mean(chain[-(1:burnIn),1]))
abline(v = true.alpha, col="red" )
hist(chain[-(1:burnIn),2],nclass=30, main="Posterior of b", xlab="True value = red line")
abline(v = mean(chain[-(1:burnIn),2]))
abline(v = true.b, col="red" )
hist(chain[-(1:burnIn),3],nclass=30, main="Posterior of sd", xlab="True value = red line")
abline(v = mean(chain[-(1:burnIn),3]) )
abline(v = true.sd, col="red" )
plot(chain[-(1:burnIn),1], type = "l", xlab="True value = red line" , main = "Chain values of a", )
abline(h = trueA, col="red" )
par(mfrow = c(2,3))
hist(chain[-(1:burnIn),1],nclass=30, , main="Posterior of a", xlab="True value = red line" )
abline(v = mean(chain[-(1:burnIn),1]))
abline(v = true.alpha, col="red" )
hist(chain[-(1:burnIn),2],nclass=30, main="Posterior of b", xlab="True value = red line")
abline(v = mean(chain[-(1:burnIn),2]))
abline(v = true.b, col="red" )
hist(chain[-(1:burnIn),3],nclass=30, main="Posterior of sd", xlab="True value = red line")
abline(v = mean(chain[-(1:burnIn),3]) )
abline(v = true.sd, col="red" )
plot(chain[-(1:burnIn),1], type = "l", xlab="True value = red line" , main = "Chain values of a", )
abline(h = true.alpha, col="red" )
plot(chain[-(1:burnIn),2], type = "l", xlab="True value = red line" , main = "Chain values of b", )
abline(h = true.b, col="red" )
plot(chain[-(1:burnIn),3], type = "l", xlab="True value = red line" , main = "Chain values of sd", )
abline(h = true.sd, col="red" )
burnIn = 5000
?abline()
par(mfrow = c(2,3))
hist(chain[-(1:burnIn),1],nclass=30, main="Intercept Posterior", xlab="True = red")
abline(v = mean(chain[-(1:burnIn),1]))
abline(v = true.alpha, col="red" )
hist(chain[-(1:burnIn),2],nclass=30, main="Posterior Beta.1", xlab="True = red")
abline(v = mean(chain[-(1:burnIn),2]))
abline(v = true.b, col="red" )
hist(chain[-(1:burnIn),3],nclass=30, main="Posterior Sigma", xlab="True = red")
abline(v = mean(chain[-(1:burnIn),3]) )
abline(v = true.sd, col="red" )
plot(chain[-(1:burnIn),1], type = "l", xlab="True = red" , main = "Chain values of alpha", )
abline(h = true.alpha, col="red" )
plot(chain[-(1:burnIn),2], type = "l", xlab="True = red" , main = "Chain values of beta1", )
abline(h = true.b, col="red" )
plot(chain[-(1:burnIn),3], type = "l", xlab="True = red" , main = "Chain values of sd", )
abline(h = true.sd, col="red" )
summary(lm(y~x))
## Not run:
### logistic regression
library("MASS")
data(birthwt)
y<- birthwt$lo
x<- data.frame(birthwt[,-1])
x$race<- as.factor(x$race)
x$ht<- (x$ht>=1)+0
x<- x[,-9]
x$smoke <- as.factor(x$smoke)
x$ptl<- as.factor(x$ptl)
x$ht <- as.factor(x$ht)
x$ui <- as.factor(x$ui)
library(BMA)
glm.out.FT <- bic.glm(x, y, strict = FALSE, OR = 20,
glm.family="binomial", factor.type=TRUE)
summary(glm.out.FT)
## Not run:
### Finney data
data(vaso)
x<- vaso[,1:2]
y<- vaso[,3]
n<- rep(1,times=length(y))
finney.models<- rbind(
c(1, 0),
c(0, 1),
c(1, 1))
finney.glib <- glib (x,y,n, error="binomial", link="logit",
models=finney.models, glimvar=TRUE,
output.priorvar=TRUE, output.postvar=TRUE)
summary(finney.glib)
predict(glm.out.FT, newdata = x)
data(birthwt)
y<- birthwt$lo
x<- data.frame(birthwt[,-1])
x$race<- as.factor(x$race)
x$ht<- (x$ht>=1)+0
x<- x[,-9]
x$smoke <- as.factor(x$smoke)
x$ptl<- as.factor(x$ptl)
x$ht <- as.factor(x$ht)
x$ui <- as.factor(x$ui)
glm.out.FT <- bic.glm(x, y, strict = FALSE, OR = 20,
glm.family="binomial", factor.type=TRUE)
predict(glm.out.FT, newdata = x)
plot(y~x)
bic.glm.bwT <- bic.glm(x, y, strict = FALSE, OR = 20,
glm.family="binomial",
factor.type=TRUE)
predict( bic.glm.bwT, newdata = x)
summary(bic.glm.bwT)
summary(bic.glm.bwT, conditional = T)
library(MASS)
data(Pima.tr)
# enumeration with default method="BAS"
pima.cch = bas.glm(type ~ ., data=Pima.tr, n.models= 2^7,
method="BAS",
betaprior=CCH(a=1, b=532/2, s=0), family=binomial(),
modelprior=beta.binomial(1,1))
library(BAS)
install.packages("BAS")
install.packages("BAS")
library(BAS)
# enumeration with default method="BAS"
pima.cch = bas.glm(type ~ ., data=Pima.tr, n.models= 2^7,
method="BAS",
betaprior=CCH(a=1, b=532/2, s=0), family=binomial(),
modelprior=beta.binomial(1,1))
summary(pima.cch)
pima.robust = bas.glm(type ~ ., data=Pima.tr, n.models= 2^7,
method="MCMC", MCMC.iterations=5000,
betaprior=robust(), family=binomial(),
modelprior=beta.binomial(1,1))
summary(pima.robust)
pima.BIC = bas.glm(type ~ ., data=Pima.tr, n.models= 2^7,
method="BAS+MCMC", MCMC.iterations=5000,
betaprior=bic.prior(), family=binomial(),
modelprior=uniform())
summary(pima.BIC)
pima.robust = bas.glm(type ~ ., data=Pima.tr, n.models= 2^7,
method="BAS+MCMC", MCMC.iterations=5000,
betaprior=robust(), family=binomial(),
modelprior=beta.binomial(1,1))
summary(pima.robust)
summary(glm.out.FT)
pima.robust$coefficients
summary(pima.robust)
pima.robust = bas.glm(type ~ ., data=Pima.tr, n.models= 2^7,
method="MCMC", MCMC.iterations=5000,
betaprior=robust(), family=binomial(),
modelprior=beta.binomial(1,1))
summary(pima.robust)
summary(pima.cch)
pima.cch$mle
pima.cch$mle->bob
dim(bob)
bob
pima.cch$se->bob
bob
pima.cch$mle.se
summary(pima.robust)
pima.cch$modelprior
pima.cch$betaprior
coef.bas(pima.cch)
coef(pima.cch)
predict(pima.robust, newdata = Pima.tr)
View(pima.tr)
View(Pima.tr)
predict(pima.robust, newdata = Pima.tr, type = 'response')
predict(pima.robust, newdata = Pima.tr, type = 'link')
predict(pima.robust, newdata=Pima.tr, type = 'response')
predict(pima.robust, newdata=Pima.tr, type = 'response')
fitted(pima.robust, newdata=Pima.tr)
fitted(pima.robust, newdata=Pima.tr, type = 'response')
library(MASS)
library(BAS)
data(Pima.tr)
# enumeration with default method="BAS"
pima.cch = bas.glm(type ~ ., data=Pima.tr, n.models= 2^7,
method="BAS",
betaprior=CCH(a=1, b=532/2, s=0), family=binomial(),
modelprior=beta.binomial(1,1))
summary(pima.cch)
pima.robust = bas.glm(type ~ ., data=Pima.tr, n.models= 2^7,
method="MCMC", MCMC.iterations=5000,
betaprior=robust(), family=binomial(),
modelprior=beta.binomial(1,1))
pima.robust = bas.glm(type ~ ., data=Pima.tr, n.models= 2^7,
method="MCMC", MCMC.iterations=5000,
betaprior=robust(), family=binomial(),
modelprior=beta.binomial(1,1))
summary(pima.robust)
pima.robust = bas.glm(type ~ ., data=Pima.tr, n.models= 2^7,
method="MCMC", MCMC.iterations=100000,
betaprior=robust(), family=binomial(),
modelprior=beta.binomial(1,1))
summary(pima.robust)
View(hr)
knitr::opts_chunk$set(echo = TRUE)
library(invgamma)
x <-hr$age
y <-  hr$annpay
plot(x,y, main="Test Data")
likelihood <- function(param){
alpha = param[1]
beta = param[2]
sd = param[3]
y.hat = alpha + beta*x
ind.LL = dnorm(y, mean = y.hat, sd = sd, log = T)
LL = sum(ind.LL)
return(LL)
}
# Example: plot the likelihood profile of the slope (beta)
beta.LLfun <- function(b){return(likelihood(c(true.alpha, b, true.sd)))}
beta.LLres <- lapply(seq(3, 7, by=.05), beta.LLfun )
plot (seq(3, 7, by=.05), beta.LLres , type="l", xlab = "beta values", ylab = "LL")
prior <- function(param){
alpha = param[1]
beta = param[2]
sd = param[3]
pr.alpha = dnorm(alpha, mean = 0, sd = 1000, log = T)
pr.beta = dnorm(beta, mean = 0, sd = 1000, log = T)
pr.sd = dinvgamma(sd, 1, 1, log = T)
pr.theta = sum(pr.alpha, pr.beta, pr.sd)
return(pr.theta)
}
posterior <- function(param){
return (likelihood(param) + prior(param))
}
propose <- function(param){
return(rnorm(3,mean = param, sd= c(0.1,0.5,0.3)))
}
MCMC_MH <- function(startval, iterations){
chain = array(dim = c(iterations+1,3))                # Structure of Array
chain[1,] = startval                              # Establish Loop
for (i in 1:iterations){
proposal = propose(chain[i,])   # Propose theta[i+1] based on theta[i]
accept = exp(posterior(proposal) - posterior(chain[i,]))
if (runif(1) < accept){     #AR <-Post(theta[i+1]) to Post(theta[i])
chain[i+1,] = proposal
}else{
chain[i+1,] = chain[i,]
}
}
return(chain)
}
startval = c(4,0,10)
chain = MCMC_MH(startval, 40000)
burnIn = 1000
acceptance = 1-mean(duplicated(chain[-(1:burnIn),]))
hist(chain[,1], main = "Intercept Posterior")
hist(chain[,2], main = "Beta1 Posterior")
hist(chain[,3], main = "Sigma Posterior")
lm(y~x)
library(rstanarm)
m1<-stan_glm(y~x)
print(m1)
bas.glm()
mean()
mean
bas.glm
knitr::opts_chunk$set(echo = TRUE)
library(invgamma)
true.b <- 5
true.alpha <- 0
true.sd <- 10
N <- 31
x <-(-15:15)
y <-  true.alpha + true.b * x + rnorm(n=N,mean=0,sd=true.sd)
plot(x,y, main="Test Data")
likelihood <- function(param){
alpha = param[1]
beta = param[2]
sd = param[3]
y.hat = alpha + beta*x
ind.LL = dnorm(y, mean = y.hat, sd = sd, log = T)
LL = sum(ind.LL)
return(LL)
}
# Example: plot the likelihood profile of the slope (beta)
beta.LLfun <- function(b){return(likelihood(c(true.alpha, b, true.sd)))}
beta.LLres <- lapply(seq(3, 7, by=.05), beta.LLfun )
plot (seq(3, 7, by=.05), beta.LLres , type="l", xlab = "beta values", ylab = "LL")
prior <- function(param){
alpha = param[1]
beta = param[2]
sd = param[3]
pr.alpha = dnorm(alpha, mean = 0, sd = 1000, log = T)
pr.beta = dnorm(beta, mean = 0, sd = 1000, log = T)
pr.sd = dinvgamma(sd, 1, 1, log = T)
pr.theta = sum(pr.alpha, pr.beta, pr.sd)
return(pr.theta)
}
posterior <- function(param){
return (likelihood(param) + prior(param))
}
propose <- function(param){
return(rnorm(3,mean = param, sd= c(0.1,0.5,0.3)))
}
MCMC_MH <- function(startval, iterations){
chain = array(dim = c(iterations+1,3))                # Structure of Array
chain[1,] = startval                              # Establish Loop
for (i in 1:iterations){
proposal = propose(chain[i,])   # Propose theta[i+1] based on theta[i]
accept = exp(posterior(proposal) - posterior(chain[i,]))
if (runif(1) < accept){     #AR <-Post(theta[i+1]) to Post(theta[i])
chain[i+1,] = proposal
}else{
chain[i+1,] = chain[i,]
}
}
return(chain)
}
startval = c(4,0,10)
chain = MCMC_MH(startval, 40000)
burnIn = 1000
acceptance = 1-mean(duplicated(chain[-(1:burnIn),]))
hist(chain[,1], main = "Intercept Posterior")
hist(chain[,2], main = "Beta1 Posterior")
hist(chain[,3], main = "Sigma Posterior")
par(mfrow = c(2,3))
hist(chain[-(1:burnIn),1],nclass=30, main="Intercept Posterior", xlab="True = red")
abline(v = mean(chain[-(1:burnIn),1]))
abline(v = true.alpha, col="red" )
hist(chain[-(1:burnIn),2],nclass=30, main="Posterior Beta.1", xlab="True = red")
abline(v = mean(chain[-(1:burnIn),2]))
abline(v = true.b, col="red" )
hist(chain[-(1:burnIn),3],nclass=30, main="Posterior Sigma", xlab="True = red")
abline(v = mean(chain[-(1:burnIn),3]) )
abline(v = true.sd, col="red" )
plot(chain[-(1:burnIn),1], type = "l", xlab="True = red" , main = "Chain values of alpha", )
abline(h = true.alpha, col="red" )
plot(chain[-(1:burnIn),2], type = "l", xlab="True = red" , main = "Chain values of beta1", )
abline(h = true.b, col="red" )
plot(chain[-(1:burnIn),3], type = "l", xlab="True = red" , main = "Chain values of sd", )
abline(h = true.sd, col="red" )
head(chain)
dim(chain)
mean(chain[,1])
mean(chain[,2])
var(chain[,2])
bas
bas.glm
library(BAS)
bas.glm
my_list <- list(lower=letters[1:4], upper=letters[-1:-20])
my_list['lower']
my_list[['lower']]
library(BAS)
bas.glm
pima.robust = bas.glm(type ~ ., data=Pima.tr, n.models= 2^7,
method="MCMC", MCMC.iterations=10000,
betaprior=robust(), family=binomial(),
modelprior=beta.binomial(1,1))
summary(pima.robust)
hrbma<-bms(hr, mprior = 'uniform', burn = 20000, iter = 50000, user.int = FALSE)
library(BMS)
hrbma<-bms(hr, mprior = 'uniform', burn = 20000, iter = 50000, user.int = FALSE)
rint(hrbma)
print(hrbma)
pima.robust = bas.glm(type ~ ., data=Pima.tr, n.models= 2^7,
method="MCMC", MCMC.iterations=10000,
betaprior=robust(), family=binomial(),
modelprior=beta.binomial(1,1))
summary(pima.robust)
coef(pima.robust)
coef(pima.robust)[1]
confint(pima.robust)
pima.robust$postprobs
sum(pima.robust$postprobs)
pima.robust$priorprobs
pima.robust$freq
sum(pima.robust$freq)
pima.robust$which
pima.robust$postprobs.MCMC
pima.robust$model
pima.robust$xlevels
pima.robust$terms
pima.robust$call
pima.robust$X
pima.robust$Y
pima.robust$n.vars
pima.robust$include.always
pima.robust$n.models
pima.robust$betaprior
pima.robust$family
pima.robust$postprobs.RN
summary(pima.robust)
library(BAS)
pima.robust$mle
coef(pima.robust)
View(Pima.tr)
getwd()
var(c(10,8,6,4,2))
library(readr)
IO_Level1_Data <- read_csv("IO_Level1_Data.csv")
View(IO_Level1_Data)
io_l1<-IO_Level1_Data
View(io_l1)
table(io_l1$code)
names(io_l1)[1]<-"id"
io_l1<-io_l1[-1]
View(io_l1)
nrow(io_l1)
library(tidyverse)
io_l1 %>% group_by(code) %>% summarize(grptot = sum())
io_l1 %>% group_by(code) %>% summarize(grptot = nrow())
io_l1 %>% group_by(code) %>% summarize(grptot = nrow(code))
io_l1 %>% group_by(code) %>% summarize(grptot = nrow(code))->bob
View(bob)
table(io_l1$code)->bob
View(bob)
library(tidyverse)
library(tidyverse)
io_l1 %>% group_by(code) %>% summarize(n())
io_l1 %>% group_by(code) %>% summarize(freq = n()) -> test
View(test)
qplot(x=code, data=io_l1, geom="bar")
qplot(x=age, y=TI, data=io_l1, geom="point")
qplot(x=gender, y=TI, data=io_l1, geom="box")
qplot(x=gender, y=TI, data=io_l1, geom="bar")
qplot(x=gender, y=TI, data=io_l1, geom="point")
qplot(x=age, y=edu, data=io_l1, geom="point")
qplot(x=voice, y=TI, data=io_l1, geom="point")
qplot(x=gender, y=TI, data=io_l1, geom="histogram")
qplot(x=TI, data=io_l1, geom="histogram") + facet_grid(.~TI)
mydata$Agecat1<-cut(mydata$Age, c(0,4,5))
io_l1$TI2<-cut(iol1$TI,  c(0,4,5), right=FALSE, labels=c(0:1))
io_l1$TI2<-cut(io_l1$TI,  c(0,4,5), right=FALSE, labels=c(0:1))
io_l1$TI2<-cut(io_l1$TI,  c(0,4,5), labels=c(0:1))
hist(io_l1$TI)
table(io_l1$TI)
table(io_l1$TI)
io_l1$TI2<-cut(io_l1$TI,  c(0,3), labels=c(0:1))
io_l1$TI2<-cut(io_l1$TI,  c(0,3,5), labels=c(0:1))
table(io_l1$TI2)
table(io_l1$code, io_l1$TI2)
table(io_l1$TI)
table(io_l1$TI2)
io_l1$TI2<-cut(io_l1$TI,  c(0,4,5), labels=c(0:1))
table(io_l1$TI2)
io_l1$TI2<-cut(io_l1$TI,  c(0,3,5), labels=c(0:1))
table(io_l1$TI2)
library(readr)
library(BMS)
library(BMA)
library(BAS)
library(psych)
library(caret)
io_use <- read_csv("io1_USE.csv")
io_use <- read_csv("io_USE.csv")
io_use<-io_use[,-c(1,3:4)]
io_use$TI2<-as.factor(io_use$TI2)
View(io_use)
#Splitting data as training and test set.
set.seed(300)
indxTrain <- createDataPartition(y = io_use$TI2,p = 0.7,list = FALSE)
training <- io_use[indxTrain,]
testing <- io_use[-indxTrain,]
# Descriptives
#Checking distibution in orignal data and partitioned data
prop.table(table(training$TI2)) * 100
prop.table(table(testing$TI2)) * 100
prop.table(table(io_use$TI2)) * 100
## Descriptives
describeBy(io_use[2:10], io_use$TI2, digits = 1)
# DATA with Continuous TurnOver Intentions as DV
io_cont <- read_csv("io_USE.csv")
io_dichot<-io_dichot[,-c(1,2,4)]
# DATA with Binary TO Intentions as DV
io_dichot <- read_csv("io_USE.csv")
io_dichot<-io_dichot[,-c(1,3:4)]
io_dichot$TI2<-as.factor(io_dichot$TI2)
View(io_dichot)
# DATA with Continuous TurnOver Intentions as DV
io_cont <- read_csv("io_USE.csv")
io_cont<-io_cont[,-c(1,2,4)]
# DATA with Binary TO Intentions as DV
io_dichot <- read_csv("io_USE.csv")
io_dichot<-io_dichot[,-c(1,3:4)]
io_dichot$TI2<-as.factor(io_dichot$TI2)
View(io_cont)
# BMS
m1<-bms(io_cont)
m2<-bms(io_dichot)
io<-read.csv("IO_Level1_Data.csv")
io<-io[,-c(1,3)]
m2<-bms(io)
# DATA with Binary TO Intentions as DV
io_dichot <- read_csv("IO_Level1_Data.csv")
io_dichot<-io_dichot[,-c(1,3)]
io_dichot$TI2<-ifelse(io_dichot$TI > 3, "Quit", "NoQuit")
io_dichot$TI2<-as.factor(io_dichot$TI2)
View(io_dichot)
io_dichot<-io_dichot[-1]
io_dichot<-io_dichot %>% relocate(TI2, .before=age)
library(tidyverse)
io_dichot<-io_dichot %>% relocate(TI2, .before=age)
View(io_dichot)
View(io)
#BAS
m2<-bas.glm(TI2 ~ ., data=io_dichot)
#BAS
m2<-bas.glm(TI2 ~ ., family = "binomial", data=io_dichot)
?bas()
summary(m2)
